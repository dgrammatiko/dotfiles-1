#!/usr/bin/env zsh

# ==== functions ==== #

# Calculator in shell.
# Uses Python with Numpy loaded.
= () {
if [ "$#" -ne 1 ]; then
  print "Put the expression in quotes"
else
  print "from numpy import *; print('{:g}'.format($@))" | python
fi
}

# Fuzzy search Chrome history with fzf.
# https://junegunn.kr/2015/04/browsing-chrome-history-with-fzf/
chrome-history () {
  local cols sep
  cols=$(( COLUMNS / 3 ))
  sep='{::}'
  \cp -r -f ~/Library/Application\ Support/Google/Chrome/Default/History /tmp/fzf.chrome.history
  sqlite3 -separator $sep /tmp/h "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" | awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' | fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}

# Extract zip, tar, & other archives.
extract() {
  local remove_archive
  local success
  local extract_dir

  if (( $# == 0 )); then
    cat <<HELP >&2
Usage: extract [-option] [file ...]

Options:
    -r, --remove    Remove archive after unpacking.
HELP
  fi

  remove_archive=1
  if [[ "$1" == "-r" ]] || [[ "$1" == "--remove" ]]; then
    remove_archive=0
    shift
  fi

  while (( $# > 0 )); do
    if [[ ! -f "$1" ]]; then
      echo "extract: '$1' is not a valid file" >&2
      shift
      continue
    fi

    success=0
    extract_dir="${1:t:r}"
    case "${1:l}" in
      (*.tar.gz|*.tgz) (( $+commands[pigz] )) && { pigz -dc "$1" | tar xv } || tar zxvf "$1" ;;
      (*.tar.bz2|*.tbz|*.tbz2) tar xvjf "$1" ;;
      (*.tar.xz|*.txz)
        tar --xz --help &> /dev/null \
        && tar --xz -xvf "$1" \
        || xzcat "$1" | tar xvf - ;;
      (*.tar.zma|*.tlz)
        tar --lzma --help &> /dev/null \
        && tar --lzma -xvf "$1" \
        || lzcat "$1" | tar xvf - ;;
      (*.tar) tar xvf "$1" ;;
      (*.gz) (( $+commands[pigz] )) && pigz -d "$1" || gunzip "$1" ;;
      (*.bz2) bunzip2 "$1" ;;
      (*.xz) unxz "$1" ;;
      (*.lzma) unlzma "$1" ;;
      (*.z) uncompress "$1" ;;
      (*.zip|*.war|*.jar|*.sublime-package|*.ipsw|*.xpi|*.apk|*.whl) unzip "$1" -d $extract_dir ;;
      (*.rar) unrar x -ad "$1" ;;
      (*.7z) 7za x "$1" ;;
      (*.deb)
        mkdir -p "$extract_dir/control"
        mkdir -p "$extract_dir/data"
        cd "$extract_dir"; ar vx "../${1}" > /dev/null
        cd control; tar xzvf ../control.tar.gz
        cd ../data; extract ../data.tar.*
        cd ..; rm *.tar.* debian-binary
        cd ..
      ;;
      (*)
        echo "extract: '$1' cannot be extracted" >&2
        success=1
      ;;
    esac

    (( success = $success > 0 ? $success : $? ))
    (( $success == 0 )) && (( $remove_archive == 0 )) && rm "$1"
    shift
  done
}

# Fuzzy search git commits with fzf.
git-search () {
  _is-in-git-repo() {
    git rev-parse HEAD > /dev/null 2>&1
  }
  _fzf-down() {
    fzf --height 50% "$@" --border
  }
  _is-in-git-repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  _fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -'$LINES |
  grep -o "[a-f0-9]\{7,\}"
}

# Detect OS.
is-macos() {
  [[ "$OSTYPE" =~ ^darwin ]] || return 1
}
is-ubuntu() {
  [[ "$(cat /etc/issue 2> /dev/null)" =~ Ubuntu ]] || return 1
}

# Colored man pages.
man () {
  env \
  LESS_TERMCAP_mb=$(printf "\e[1;31m") \
  LESS_TERMCAP_md=$(printf "\e[1;31m") \
  LESS_TERMCAP_me=$(printf "\e[0m") \
  LESS_TERMCAP_se=$(printf "\e[0m") \
  LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
  LESS_TERMCAP_ue=$(printf "\e[0m") \
  LESS_TERMCAP_us=$(printf "\e[1;32m") \
  PAGER="${commands[less]:-$PAGER}" \
  man "$@"
}

# Fuzzy search full text of PDFs with fzf.
# See https://github.com/bellecp/fast-p.
pdf-search () {
    local open
    open=open   # on OSX, "open" opens a pdf in preview
    ag -U -g ".pdf$" \
    | fast-p \
    | fzf --read0 --reverse -e -d $'\t'  \
        --preview-window down:80% --preview '
            v=$(echo {q} | gtr " " "|");
            echo -e {1}"\n"{2} | ggrep -E "^|$v" -i --color=always;
        ' \
    | gcut -z -f 1 -d $'\t' | gtr -d '\n' | gxargs -r --null $open > /dev/null 2> /dev/null
}

# fzf preview window.
# Fuzzy search files within a directory and preview the contents.
# Only works on text files, not binaries.
preview () {
  fzf --preview '[[ $(file --mime {}) =~ binary ]] &&
                   echo {} is a binary file ||
                   (bat --style=numbers --color=always {} ||
                    highlight -O ansi -l {} ||
                    coderay {} ||
                    rougify {} ||
                    cat {}) 2> /dev/null | head -500' --preview-window down:20
}

# Fuzzy seach for previous directory and change to it with fzf.
previous-dirs () {
  local dest_dir=$(dirs -v | awk '{print $2}' | fzf)
  if [[ $dest_dir != '' ]]; then
    cd ${~dest_dir}
  fi
}

# Sort VS Code dictionary file.
sort-spell-file () {
  sort -f -o ${DOTFILES}/vscode/spellright.dict ${DOTFILES}/vscode/spellright.dict
}

# Turtle.
turtle () {
  echo '                               ___-------___                        '
  echo '                           _-~~             ~~-_                    '
  echo '                        _-~                    /~-_                 '
  echo '     /^\__/^\         /~  \                   /    \                '
  echo '   /|  O|| O|        /      \_______________/        \              '
  echo '  | |___||__|      /       /                \          \            '
  echo '  |          \    /      /                    \          \          '
  echo '  |   (_______) /______/                        \_________ \        '
  echo '  |         / /         \                      /            \       '
  echo '   \         \^\\         \                  /               \     /'
  echo '     \         ||           \______________/      _-_       //\__// '
  echo '       \       ||------_-~~-_ ------------- \ --/~   ~\    || __/   '
  echo '         ~-----||====/~     |==================|       |/~~~~~      '
  echo '          (_(__/  ./     /                    \_\      \.           '
  echo '                 (_(___/                         \_____)_)-         '
}

# Updating system.
update-apt () {
  sudo apt update
  sudo apt -y upgrade
}
update-brew () {
  brew update
  brew upgrade
  yes | brew cleanup
}
update-nvim () {
  nvim +PlugUpgrade +PlugUpdate +UpdateRemotePlugins +qall
  pip install --upgrade pynvim
}
update-zsh-plugins () {
  local cwd=$PWD
  cd ~/.local/share/zsh/repos || exit
  local directories=(*/)
  for directory in ${directories[@]}; do
    echo $directory && cd $directory && git pull && cd -
  done
  cd $cwd
}

# Python webserver: serves the contents of the folder.
web-server () {
  python -m http.server 0 --bind 127.0.0.1 &
}

# ----------------------------------------------------------------------------- #

# Fancy Ctrl-Z: fg -> ctrl-z.
# Type ctrl-z to background a process, and ctrl-z to foreground it.
_fancy-ctrl-z () {
  if [[ $#BUFFER -eq 0 ]]; then
    BUFFER="fg"
    zle accept-line
  else
    zle push-input
    zle clear-screen
  fi
}
zle -N _fancy-ctrl-z
bindkey '^Z' _fancy-ctrl-z

# Print time of last commit. Useful for prompts.
# Derived from dogenpunk.zsh-theme from oh-my-zsh.
_git-time-since-commit() {
  if git rev-parse --git-dir > /dev/null 2>&1; then
    # Only proceed if there is actually a commit.
    if git log -n 1  > /dev/null 2>&1; then
      # Get the last commit.
      last_commit=`git log --pretty=format:'%at' -1 2> /dev/null`
      now=`date +%s`
      seconds_since_last_commit=$((now-last_commit))

      # Totals
      MINUTES=$((seconds_since_last_commit / 60))
      HOURS=$((seconds_since_last_commit/3600))

      # Sub-hours and sub-minutes
      DAYS=$((seconds_since_last_commit / 86400))
      SUB_HOURS=$((HOURS % 24))
      SUB_MINUTES=$((MINUTES % 60))

      if [ "$HOURS" -gt 24 ]; then
        print "(${DAYS}d)"
      elif [ "$MINUTES" -gt 60 ]; then
        print "(${HOURS}h)"
      else
        print "(${MINUTES}m)"
      fi
    else
      print ""
    fi
  fi
}

# Add my patch to Spaceship zsh theme.
_patch-spaceship () {
  patch -R ~/.local/share/zsh/repos/spaceship-prompt/sections/git_branch.zsh << 'EOF'
30c30
<     "$SPACESHIP_GIT_BRANCH_PREFIX${git_current_branch}$(_git-time-since-commit)$SPACESHIP_GIT_BRANCH_SUFFIX"
---
>     "$SPACESHIP_GIT_BRANCH_PREFIX${git_current_branch}$SPACESHIP_GIT_BRANCH_SUFFIX"
EOF
}
